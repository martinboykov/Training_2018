const request = require('supertest');
const { Genre } = require('../../models/genre');
const { User } = require('../../models/user');
let server;

describe('/api/genres', () => {
    // as we need to loadd the server aggain and aggain =>
    // we will get error, as the server will be already runnging =>
    // beforeEach/afterEach start/close the server
    beforeEach(() => {
        server = require('../../index');
    });
    afterEach(async () => {
        server.close();

        // we need to clean the db after every test run
        await Genre.remove({});
    });
    describe('GET /', () => {
        it('should return all genres', async () => {
            await Genre.collection.insertMany([
                { name: 'genre1' },
                { name: 'genre2' },
            ]);
            const res = await request(server).get('/api/genres');
            expect(res.status).toBe(200);
            // asserting that we get the two objects above in the db_test
            expect(res.body.length).toBe(2);

            // making sure that we have name: genre1 in the response obj
            expect(res.body.some((g) => {
                return g.name === 'genre1';
            }
            )).toBeTruthy();
            expect(res.body.some((g) => {
                return g.name === 'genre2';
            }
            )).toBeTruthy();
        });
    });
    describe('GET /:id', () => {
        it('should return the genre with the requested id', async () => {
            let genre = new Genre({ name: 'genre1' });
            genre = await genre.save();
            const res = await request(server).get(`/api/genres/${genre._id}`);
            expect(res.status).toBe(200);

            // making sure that we have name: genre1 in the response obj
            expect(res.body.name === 'genre1').toBeTruthy();
            expect(res.body).toHaveProperty('name', genre.name);
        });
        it('should return (404) error if we dont have item with requested id', async () => {

            // MY APPROACH
            // -----------
            // await Genre.collection.insertMany([
            //     { name: 'genre1' },
            //     { name: 'genre2' },
            // ]);
            // // const genre = await Genre.findOne({ name: 'genre3' });
            // // const res = await request(server).get(`/api/genres/${genre._id}`);
            // const genreFakeId = '111111111111111111111111';
            // const res = await request(server).get(`/api/genres/${genreFakeId}`);
            // expect(res.status).toBe(404);

            // THE BEST APPROACH (needs additional refactoring of /routes/genres.js)
            // ----------------
            const res = await request(server).get(`/api/genres/1`);
            expect(res.status).toBe(404);
        });
    });
    describe('POST /', () => {
        it('if not auth should return status 401', async () => {
            const res = await request(server)
                .post('/api/genres')
                .send({ name: 'Test1' });

            expect(res.status).toBe(401);
        });
        it('if genre less than 5 characters Invalid should return status 400', async () => {
            const token = new User().generateAuthToken();
            const res = await request(server)
                .post('/api/genres')
                .set('x-auth-token', token)
                .send({ name: '1234' });

            expect(res.status).toBe(400);
        });
        it('if genre more than 50 characters Invalid should return status 400', async () => {
            const token = new User().generateAuthToken();
            const name = new Array(52).join('a');
            const res = await request(server)
                .post('/api/genres')
                .set('x-auth-token', token)
                .send({ name: name });

            expect(res.status).toBe(400);
        });
        it('if post request successfull should return status 200 and obj(genre)', async () => {
            // const token = new User({
            //     name: 'Testing Name',
            //     email: 'testing@mail.com',
            //     password: 'testing123456',
            // }).generateAuthToken();

            // for token we need only { _id: this._id, isAdmin: this.isAdmin },
            // as _id is generated by mongo driver and isAdmin is default value =>
            // we may not include name, email and pass
            const token = new User().generateAuthToken();
            const res = await request(server)
                .post('/api/genres')
                .set('x-auth-token', token)
                .send({ name: 'genre1' });

            expect(res.status).toBe(200);
            expect(res.body.name === 'genre1').toBeTruthy();
            expect(res.body).toHaveProperty('name', 'genre1');
            expect(res.body).toHaveProperty('_id');
        });
        it('if post request successfull should save genre in db', async () => {
            // const token = new User({
            //     name: 'Testing Name',
            //     email: 'testing@mail.com',
            //     password: 'testing123456',
            // }).generateAuthToken();

            // for token we need only { _id: this._id, isAdmin: this.isAdmin },
            // as _id is generated by mongo driver and isAdmin is default value =>
            // we may not include name, email and pass
            const token = new User().generateAuthToken();
            await request(server)
                .post('/api/genres')
                .set('x-auth-token', token)
                .send({ name: 'genre1' });

            const genre = await Genre.findOne({ name: 'genre1' });
            expect(genre).not.toBeNull();
        });
    });
});
