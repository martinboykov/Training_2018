<div class="longdesc"
     id="entry-longdesc">
    <div class="warning">
        <p>Note: Prior to jQuery 3.0, the event handling suite also had a method named
            <code><a href="/load-event/">.load()</a></code>. Older versions of jQuery determined which method to fire based on the set of arguments passed to it.</p>
    </div>
    <p>This method is the simplest way to fetch data from the server. It is roughly equivalent to
        <code>$.get(url, data, success)</code> except that it is a method rather than global function and it has an implicit callback function. When a successful
        response is detected (i.e. when
        <code>textStatus</code> is "success" or "notmodified"),
        <code>.load()</code> sets the HTML contents of the matched element to the returned data. This means that most uses of the method can
        be quite simple:</p>
    <div class="syntaxhighlighter javascript">
        <table>
            <tbody>
                <tr>

                    <td class="gutter">

                        <div class="line n1">1</div>

                    </td>

                    <td class="code">
                        <pre><div class="container"><div class="line"><code>$( <span class="string">"#result"</span> ).load( <span class="string">"ajax/test.html"</span> );</code></div></div></pre>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <p>If no element is matched by the selector — in this case, if the document does not contain an element with id="result"
        — the Ajax request will
        <em>not</em> be sent.</p>
    <h4 id="callback-function">Callback Function</h4>
    <p>If a "complete" callback is provided, it is executed after post-processing and HTML insertion has been performed. The
        callback is fired once for each element in the jQuery collection, and
        <code>this</code> is set to each DOM element in turn.</p>
    <div class="syntaxhighlighter javascript">
        <table>
            <tbody>
                <tr>

                    <td class="gutter">

                        <div class="line n1">1</div>

                        <div class="line n2">2</div>

                        <div class="line n3">3</div>

                    </td>

                    <td class="code">
                        <pre><div class="container"><div class="line"><code>$( <span class="string">"#result"</span> ).load( <span class="string">"ajax/test.html"</span>, <span class="keyword">function</span>() {</code></div></div><div class="container"><div class="line"><code>  alert( <span class="string">"Load was performed."</span> );</code></div></div><div class="container"><div class="line"><code>});</code></div></div></pre>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <p>In the two examples above, if the current document does not contain an element with an ID of "result," the
        <code>.load()</code> method is not executed.</p>
    <h4 id="request-method">Request Method</h4>
    <p>The POST method is used if data is provided as an object; otherwise, GET is assumed.</p>
    <h4 id="loading-page-fragments">Loading Page Fragments</h4>
    <p>The
        <code>.load()</code> method, unlike
        <code><a href="/jQuery.get/">$.get()</a></code>, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for
        the
        <code>url</code> parameter. If one or more space characters are included in the string, the portion of the string following the first
        space is assumed to be a jQuery selector that determines the content to be loaded. </p>
    <p>We could modify the example above to use only part of the document that is fetched:</p>
    <div class="syntaxhighlighter javascript">
        <table>
            <tbody>
                <tr>

                    <td class="gutter">

                        <div class="line n1">1</div>

                    </td>

                    <td class="code">
                        <pre><div class="container"><div class="line"><code>$( <span class="string">"#result"</span> ).load( <span class="string">"ajax/test.html #container"</span> );</code></div></div></pre>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <p>When this method executes, it retrieves the content of
        <code>ajax/test.html</code>, but then jQuery parses the returned document to find the element with an ID of
        <code>container</code>. This element, along with its contents, is inserted into the element with an ID of
        <code>result</code>, and the rest of the retrieved document is discarded.</p>
    <p>jQuery uses the browser's
        <code>.innerHTML</code> property to parse the retrieved document and insert it into the current document. During this process, browsers
        often filter elements from the document such as
        <code>&lt;html&gt;</code>,
        <code>&lt;title&gt;</code>, or
        <code>&lt;head&gt;</code> elements. As a result, the elements retrieved by
        <code>.load()</code> may not be exactly the same as if the document were retrieved directly by the browser.</p>
    <h4 id="script-execution">Script Execution</h4>
    <p> When calling
        <code>.load()</code> using a URL without a suffixed selector expression, the content is passed to
        <code>.html()</code> prior to scripts being removed. This executes the script blocks before they are discarded. If
        <code>.load()</code> is called with a selector expression appended to the URL, however, the scripts are stripped out prior to the DOM
        being updated, and thus are
        <em>not</em> executed. An example of both cases can be seen below:</p>
    <p>Here, any JavaScript loaded into
        <code>#a</code> as a part of the document will successfully execute.</p>
    <div class="syntaxhighlighter javascript">
        <table>
            <tbody>
                <tr>

                    <td class="gutter">

                        <div class="line n1">1</div>

                    </td>

                    <td class="code">
                        <pre><div class="container"><div class="line"><code>$( <span class="string">"#a"</span> ).load( <span class="string">"article.html"</span> );</code></div></div></pre>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <p>However, in the following case, script blocks in the document being loaded into
        <code>#b</code> are stripped out and not executed:</p>
    <div class="syntaxhighlighter javascript">
        <table>
            <tbody>
                <tr>

                    <td class="gutter">

                        <div class="line n1">1</div>

                    </td>

                    <td class="code">
                        <pre><div class="container"><div class="line"><code>$( <span class="string">"#b"</span> ).load( <span class="string">"article.html #target"</span> );</code></div></div></pre>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

</div>
